'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { ThemeToggle } from '../components/ThemeToggle';

export default function AdminDashboard() {
  const [content, setContent] = useState([]);
  const [loading, setLoading] = useState(true);

  // Simulate fetching content data
  useEffect(() => {
    const fetchContent = async () => {
      try {
        // In a real application, this would be an API call
        // For now, we'll simulate with sample data
        setTimeout(() => {
          setContent([
            { 
              id: 'homepage',
              title: 'Homepage',
              status: 'approved',
              lastUpdated: '2025-05-07T10:30:00Z',
              author: 'Content Writer Agent'
            },
            { 
              id: 'criminal-defense',
              title: 'Criminal Defense Services',
              status: 'pending',
              lastUpdated: '2025-05-07T09:15:00Z',
              author: 'Content Writer Agent'
            },
            { 
              id: 'personal-injury',
              title: 'Personal Injury Services',
              status: 'review',
              lastUpdated: '2025-05-06T16:45:00Z',
              author: 'Content Writer Agent'
            },
            { 
              id: 'about-us',
              title: 'About Our Law Firm',
              status: 'draft',
              lastUpdated: '2025-05-05T14:20:00Z',
              author: 'Content Writer Agent'
            }
          ]);
          setLoading(false);
        }, 1000);
      } catch (error) {
        console.error('Failed to fetch content:', error);
        setLoading(false);
      }
    };

    fetchContent();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-white dark:bg-gray-900">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 min-h-screen">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Content Review Dashboard</h1>
          <p className="mt-2 text-gray-600 dark:text-gray-400">
            Review and manage content generated by the AI agents
          </p>
        </div>
        <div className="flex items-center space-x-4">
          <ThemeToggle />
          <Link href="/" className="text-blue-600 dark:text-blue-400 hover:underline">
            Back to Home
          </Link>
        </div>
      </div>
      
      <div className="bg-white dark:bg-gray-800 shadow overflow-hidden rounded-lg">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Content
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Last Updated
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Author
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            {content.map((item) => (
              <tr key={item.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline">
                    <Link href={`/preview/${item.id}`}>
                      {item.title}
                    </Link>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {getStatusBadge(item.status)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  {new Date(item.lastUpdated).toLocaleString()}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  {item.author}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  <div className="flex space-x-2">
                    <button 
                      onClick={() => handleStatusChange(item.id, 'approved')}
                      className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"
                    >
                      Approve
                    </button>
                    {item.status !== 'approved' && (
                      <button 
                        onClick={() => triggerRegeneration(item.id)}
                        className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                      >
                        Regenerate
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <div className="mt-8">
        <button 
          onClick={() => alert('Starting new content generation...')}
          className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
        >
          Generate New Content
        </button>
      </div>
    </div>
  );

  function getStatusBadge(status) {
    const badges = {
      draft: 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
      pending: 'bg-yellow-200 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-200',
      review: 'bg-blue-200 text-blue-800 dark:bg-blue-800 dark:text-blue-200',
      approved: 'bg-green-200 text-green-800 dark:bg-green-800 dark:text-green-200',
    };
    
    return (
      <span className={`px-2 py-1 rounded text-xs font-medium ${badges[status]}`}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  }

  function handleStatusChange(id, newStatus) {
    setContent(content.map(item => 
      item.id === id ? { ...item, status: newStatus } : item
    ));
  }

  function triggerRegeneration(id) {
    alert(`Regeneration requested for content: ${id}`);
    // In a real application, this would call the OpenAI API
  }
}